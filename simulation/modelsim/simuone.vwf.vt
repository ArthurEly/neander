// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/19/2023 03:44:20"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    parteoperativa
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module parteoperativa_vlg_sample_tst(
	cin,
	clk,
	mem_reset,
	sampler_tx
);
input  cin;
input  clk;
input  mem_reset;
output sampler_tx;

reg sample;
time current_time;
always @(cin or clk or mem_reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module parteoperativa_vlg_check_tst (
	ac_value,
	ADD,
	AND,
	carga_ac,
	carga_nz,
	carga_pc,
	carga_rdm,
	carga_rem,
	carga_ri,
	cout,
	data_out,
	inc_pc,
	mem_in,
	NOT,
	opcode,
	OR,
	pc_in,
	pc_out,
	read,
	sel,
	write,
	Y,
	sampler_rx
);
input [7:0] ac_value;
input  ADD;
input  AND;
input  carga_ac;
input  carga_nz;
input  carga_pc;
input  carga_rdm;
input  carga_rem;
input  carga_ri;
input  cout;
input [7:0] data_out;
input  inc_pc;
input [7:0] mem_in;
input  NOT;
input [2:0] opcode;
input  OR;
input [7:0] pc_in;
input [7:0] pc_out;
input  read;
input  sel;
input  write;
input  Y;
input sampler_rx;

reg [7:0] ac_value_expected;
reg  ADD_expected;
reg  AND_expected;
reg  carga_ac_expected;
reg  carga_nz_expected;
reg  carga_pc_expected;
reg  carga_rdm_expected;
reg  carga_rem_expected;
reg  carga_ri_expected;
reg  cout_expected;
reg [7:0] data_out_expected;
reg  inc_pc_expected;
reg [7:0] mem_in_expected;
reg  NOT_expected;
reg [2:0] opcode_expected;
reg  OR_expected;
reg [7:0] pc_in_expected;
reg [7:0] pc_out_expected;
reg  read_expected;
reg  sel_expected;
reg  write_expected;
reg  Y_expected;

reg [7:0] ac_value_prev;
reg  ADD_prev;
reg  AND_prev;
reg  carga_ac_prev;
reg  carga_nz_prev;
reg  carga_pc_prev;
reg  carga_rdm_prev;
reg  carga_rem_prev;
reg  carga_ri_prev;
reg  cout_prev;
reg [7:0] data_out_prev;
reg  inc_pc_prev;
reg [7:0] mem_in_prev;
reg  NOT_prev;
reg [2:0] opcode_prev;
reg  OR_prev;
reg [7:0] pc_in_prev;
reg [7:0] pc_out_prev;
reg  read_prev;
reg  sel_prev;
reg  write_prev;
reg  Y_prev;

reg [7:0] ac_value_expected_prev;
reg  ADD_expected_prev;
reg  AND_expected_prev;
reg  carga_ac_expected_prev;
reg  carga_nz_expected_prev;
reg  carga_pc_expected_prev;
reg  carga_rdm_expected_prev;
reg  carga_rem_expected_prev;
reg  carga_ri_expected_prev;
reg  cout_expected_prev;
reg [7:0] data_out_expected_prev;
reg  inc_pc_expected_prev;
reg [7:0] mem_in_expected_prev;
reg  NOT_expected_prev;
reg [2:0] opcode_expected_prev;
reg  OR_expected_prev;
reg [7:0] pc_in_expected_prev;
reg [7:0] pc_out_expected_prev;
reg  read_expected_prev;
reg  sel_expected_prev;
reg  write_expected_prev;
reg  Y_expected_prev;

reg [7:0] last_ac_value_exp;
reg  last_ADD_exp;
reg  last_AND_exp;
reg  last_carga_ac_exp;
reg  last_carga_nz_exp;
reg  last_carga_pc_exp;
reg  last_carga_rdm_exp;
reg  last_carga_rem_exp;
reg  last_carga_ri_exp;
reg  last_cout_exp;
reg [7:0] last_data_out_exp;
reg  last_inc_pc_exp;
reg [7:0] last_mem_in_exp;
reg  last_NOT_exp;
reg [2:0] last_opcode_exp;
reg  last_OR_exp;
reg [7:0] last_pc_in_exp;
reg [7:0] last_pc_out_exp;
reg  last_read_exp;
reg  last_sel_exp;
reg  last_write_exp;
reg  last_Y_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:22] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 22'b1;
end

// update real /o prevs

always @(trigger)
begin
	ac_value_prev = ac_value;
	ADD_prev = ADD;
	AND_prev = AND;
	carga_ac_prev = carga_ac;
	carga_nz_prev = carga_nz;
	carga_pc_prev = carga_pc;
	carga_rdm_prev = carga_rdm;
	carga_rem_prev = carga_rem;
	carga_ri_prev = carga_ri;
	cout_prev = cout;
	data_out_prev = data_out;
	inc_pc_prev = inc_pc;
	mem_in_prev = mem_in;
	NOT_prev = NOT;
	opcode_prev = opcode;
	OR_prev = OR;
	pc_in_prev = pc_in;
	pc_out_prev = pc_out;
	read_prev = read;
	sel_prev = sel;
	write_prev = write;
	Y_prev = Y;
end

// update expected /o prevs

always @(trigger)
begin
	ac_value_expected_prev = ac_value_expected;
	ADD_expected_prev = ADD_expected;
	AND_expected_prev = AND_expected;
	carga_ac_expected_prev = carga_ac_expected;
	carga_nz_expected_prev = carga_nz_expected;
	carga_pc_expected_prev = carga_pc_expected;
	carga_rdm_expected_prev = carga_rdm_expected;
	carga_rem_expected_prev = carga_rem_expected;
	carga_ri_expected_prev = carga_ri_expected;
	cout_expected_prev = cout_expected;
	data_out_expected_prev = data_out_expected;
	inc_pc_expected_prev = inc_pc_expected;
	mem_in_expected_prev = mem_in_expected;
	NOT_expected_prev = NOT_expected;
	opcode_expected_prev = opcode_expected;
	OR_expected_prev = OR_expected;
	pc_in_expected_prev = pc_in_expected;
	pc_out_expected_prev = pc_out_expected;
	read_expected_prev = read_expected;
	sel_expected_prev = sel_expected;
	write_expected_prev = write_expected;
	Y_expected_prev = Y_expected;
end



// expected carga_rem
initial
begin
	carga_rem_expected = 1'bX;
end 

// expected inc_pc
initial
begin
	inc_pc_expected = 1'bX;
end 

// expected carga_ri
initial
begin
	carga_ri_expected = 1'bX;
end 

// expected sel
initial
begin
	sel_expected = 1'bX;
end 

// expected carga_rdm
initial
begin
	carga_rdm_expected = 1'bX;
end 

// expected write
initial
begin
	write_expected = 1'bX;
end 

// expected read
initial
begin
	read_expected = 1'bX;
end 

// expected carga_ac
initial
begin
	carga_ac_expected = 1'bX;
end 

// expected carga_nz
initial
begin
	carga_nz_expected = 1'bX;
end 

// expected carga_pc
initial
begin
	carga_pc_expected = 1'bX;
end 

// expected cout
initial
begin
	cout_expected = 1'bX;
end 
// expected data_out[ 7 ]
initial
begin
	data_out_expected[7] = 1'bX;
end 
// expected data_out[ 6 ]
initial
begin
	data_out_expected[6] = 1'bX;
end 
// expected data_out[ 5 ]
initial
begin
	data_out_expected[5] = 1'bX;
end 
// expected data_out[ 4 ]
initial
begin
	data_out_expected[4] = 1'bX;
end 
// expected data_out[ 3 ]
initial
begin
	data_out_expected[3] = 1'bX;
end 
// expected data_out[ 2 ]
initial
begin
	data_out_expected[2] = 1'bX;
end 
// expected data_out[ 1 ]
initial
begin
	data_out_expected[1] = 1'bX;
end 
// expected data_out[ 0 ]
initial
begin
	data_out_expected[0] = 1'bX;
end 
// expected opcode[ 2 ]
initial
begin
	opcode_expected[2] = 1'bX;
end 
// expected opcode[ 1 ]
initial
begin
	opcode_expected[1] = 1'bX;
end 
// expected opcode[ 0 ]
initial
begin
	opcode_expected[0] = 1'bX;
end 

// expected ADD
initial
begin
	ADD_expected = 1'bX;
end 

// expected AND
initial
begin
	AND_expected = 1'bX;
end 

// expected OR
initial
begin
	OR_expected = 1'bX;
end 

// expected NOT
initial
begin
	NOT_expected = 1'bX;
end 

// expected Y
initial
begin
	Y_expected = 1'bX;
end 
// expected ac_value[ 7 ]
initial
begin
	ac_value_expected[7] = 1'bX;
end 
// expected ac_value[ 6 ]
initial
begin
	ac_value_expected[6] = 1'bX;
end 
// expected ac_value[ 5 ]
initial
begin
	ac_value_expected[5] = 1'bX;
end 
// expected ac_value[ 4 ]
initial
begin
	ac_value_expected[4] = 1'bX;
end 
// expected ac_value[ 3 ]
initial
begin
	ac_value_expected[3] = 1'bX;
end 
// expected ac_value[ 2 ]
initial
begin
	ac_value_expected[2] = 1'bX;
end 
// expected ac_value[ 1 ]
initial
begin
	ac_value_expected[1] = 1'bX;
end 
// expected ac_value[ 0 ]
initial
begin
	ac_value_expected[0] = 1'bX;
end 
// expected mem_in[ 7 ]
initial
begin
	mem_in_expected[7] = 1'bX;
end 
// expected mem_in[ 6 ]
initial
begin
	mem_in_expected[6] = 1'bX;
end 
// expected mem_in[ 5 ]
initial
begin
	mem_in_expected[5] = 1'bX;
end 
// expected mem_in[ 4 ]
initial
begin
	mem_in_expected[4] = 1'bX;
end 
// expected mem_in[ 3 ]
initial
begin
	mem_in_expected[3] = 1'bX;
end 
// expected mem_in[ 2 ]
initial
begin
	mem_in_expected[2] = 1'bX;
end 
// expected mem_in[ 1 ]
initial
begin
	mem_in_expected[1] = 1'bX;
end 
// expected mem_in[ 0 ]
initial
begin
	mem_in_expected[0] = 1'bX;
end 
// expected pc_in[ 7 ]
initial
begin
	pc_in_expected[7] = 1'bX;
end 
// expected pc_in[ 6 ]
initial
begin
	pc_in_expected[6] = 1'bX;
end 
// expected pc_in[ 5 ]
initial
begin
	pc_in_expected[5] = 1'bX;
end 
// expected pc_in[ 4 ]
initial
begin
	pc_in_expected[4] = 1'bX;
end 
// expected pc_in[ 3 ]
initial
begin
	pc_in_expected[3] = 1'bX;
end 
// expected pc_in[ 2 ]
initial
begin
	pc_in_expected[2] = 1'bX;
end 
// expected pc_in[ 1 ]
initial
begin
	pc_in_expected[1] = 1'bX;
end 
// expected pc_in[ 0 ]
initial
begin
	pc_in_expected[0] = 1'bX;
end 
// expected pc_out[ 7 ]
initial
begin
	pc_out_expected[7] = 1'bX;
end 
// expected pc_out[ 6 ]
initial
begin
	pc_out_expected[6] = 1'bX;
end 
// expected pc_out[ 5 ]
initial
begin
	pc_out_expected[5] = 1'bX;
end 
// expected pc_out[ 4 ]
initial
begin
	pc_out_expected[4] = 1'bX;
end 
// expected pc_out[ 3 ]
initial
begin
	pc_out_expected[3] = 1'bX;
end 
// expected pc_out[ 2 ]
initial
begin
	pc_out_expected[2] = 1'bX;
end 
// expected pc_out[ 1 ]
initial
begin
	pc_out_expected[1] = 1'bX;
end 
// expected pc_out[ 0 ]
initial
begin
	pc_out_expected[0] = 1'bX;
end 
// generate trigger
always @(ac_value_expected or ac_value or ADD_expected or ADD or AND_expected or AND or carga_ac_expected or carga_ac or carga_nz_expected or carga_nz or carga_pc_expected or carga_pc or carga_rdm_expected or carga_rdm or carga_rem_expected or carga_rem or carga_ri_expected or carga_ri or cout_expected or cout or data_out_expected or data_out or inc_pc_expected or inc_pc or mem_in_expected or mem_in or NOT_expected or NOT or opcode_expected or opcode or OR_expected or OR or pc_in_expected or pc_in or pc_out_expected or pc_out or read_expected or read or sel_expected or sel or write_expected or write or Y_expected or Y)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ac_value = %b | expected ADD = %b | expected AND = %b | expected carga_ac = %b | expected carga_nz = %b | expected carga_pc = %b | expected carga_rdm = %b | expected carga_rem = %b | expected carga_ri = %b | expected cout = %b | expected data_out = %b | expected inc_pc = %b | expected mem_in = %b | expected NOT = %b | expected opcode = %b | expected OR = %b | expected pc_in = %b | expected pc_out = %b | expected read = %b | expected sel = %b | expected write = %b | expected Y = %b | ",ac_value_expected_prev,ADD_expected_prev,AND_expected_prev,carga_ac_expected_prev,carga_nz_expected_prev,carga_pc_expected_prev,carga_rdm_expected_prev,carga_rem_expected_prev,carga_ri_expected_prev,cout_expected_prev,data_out_expected_prev,inc_pc_expected_prev,mem_in_expected_prev,NOT_expected_prev,opcode_expected_prev,OR_expected_prev,pc_in_expected_prev,pc_out_expected_prev,read_expected_prev,sel_expected_prev,write_expected_prev,Y_expected_prev);
	$display("| real ac_value = %b | real ADD = %b | real AND = %b | real carga_ac = %b | real carga_nz = %b | real carga_pc = %b | real carga_rdm = %b | real carga_rem = %b | real carga_ri = %b | real cout = %b | real data_out = %b | real inc_pc = %b | real mem_in = %b | real NOT = %b | real opcode = %b | real OR = %b | real pc_in = %b | real pc_out = %b | real read = %b | real sel = %b | real write = %b | real Y = %b | ",ac_value_prev,ADD_prev,AND_prev,carga_ac_prev,carga_nz_prev,carga_pc_prev,carga_rdm_prev,carga_rem_prev,carga_ri_prev,cout_prev,data_out_prev,inc_pc_prev,mem_in_prev,NOT_prev,opcode_prev,OR_prev,pc_in_prev,pc_out_prev,read_prev,sel_prev,write_prev,Y_prev);
`endif
	if (
		( ac_value_expected_prev[0] !== 1'bx ) && ( ac_value_prev[0] !== ac_value_expected_prev[0] )
		&& ((ac_value_expected_prev[0] !== last_ac_value_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ac_value[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ac_value_expected_prev);
		$display ("     Real value = %b", ac_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ac_value_exp[0] = ac_value_expected_prev[0];
	end
	if (
		( ac_value_expected_prev[1] !== 1'bx ) && ( ac_value_prev[1] !== ac_value_expected_prev[1] )
		&& ((ac_value_expected_prev[1] !== last_ac_value_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ac_value[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ac_value_expected_prev);
		$display ("     Real value = %b", ac_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ac_value_exp[1] = ac_value_expected_prev[1];
	end
	if (
		( ac_value_expected_prev[2] !== 1'bx ) && ( ac_value_prev[2] !== ac_value_expected_prev[2] )
		&& ((ac_value_expected_prev[2] !== last_ac_value_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ac_value[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ac_value_expected_prev);
		$display ("     Real value = %b", ac_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ac_value_exp[2] = ac_value_expected_prev[2];
	end
	if (
		( ac_value_expected_prev[3] !== 1'bx ) && ( ac_value_prev[3] !== ac_value_expected_prev[3] )
		&& ((ac_value_expected_prev[3] !== last_ac_value_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ac_value[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ac_value_expected_prev);
		$display ("     Real value = %b", ac_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ac_value_exp[3] = ac_value_expected_prev[3];
	end
	if (
		( ac_value_expected_prev[4] !== 1'bx ) && ( ac_value_prev[4] !== ac_value_expected_prev[4] )
		&& ((ac_value_expected_prev[4] !== last_ac_value_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ac_value[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ac_value_expected_prev);
		$display ("     Real value = %b", ac_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ac_value_exp[4] = ac_value_expected_prev[4];
	end
	if (
		( ac_value_expected_prev[5] !== 1'bx ) && ( ac_value_prev[5] !== ac_value_expected_prev[5] )
		&& ((ac_value_expected_prev[5] !== last_ac_value_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ac_value[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ac_value_expected_prev);
		$display ("     Real value = %b", ac_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ac_value_exp[5] = ac_value_expected_prev[5];
	end
	if (
		( ac_value_expected_prev[6] !== 1'bx ) && ( ac_value_prev[6] !== ac_value_expected_prev[6] )
		&& ((ac_value_expected_prev[6] !== last_ac_value_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ac_value[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ac_value_expected_prev);
		$display ("     Real value = %b", ac_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ac_value_exp[6] = ac_value_expected_prev[6];
	end
	if (
		( ac_value_expected_prev[7] !== 1'bx ) && ( ac_value_prev[7] !== ac_value_expected_prev[7] )
		&& ((ac_value_expected_prev[7] !== last_ac_value_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ac_value[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ac_value_expected_prev);
		$display ("     Real value = %b", ac_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ac_value_exp[7] = ac_value_expected_prev[7];
	end
	if (
		( ADD_expected_prev !== 1'bx ) && ( ADD_prev !== ADD_expected_prev )
		&& ((ADD_expected_prev !== last_ADD_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADD_expected_prev);
		$display ("     Real value = %b", ADD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ADD_exp = ADD_expected_prev;
	end
	if (
		( AND_expected_prev !== 1'bx ) && ( AND_prev !== AND_expected_prev )
		&& ((AND_expected_prev !== last_AND_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AND :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AND_expected_prev);
		$display ("     Real value = %b", AND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_AND_exp = AND_expected_prev;
	end
	if (
		( carga_ac_expected_prev !== 1'bx ) && ( carga_ac_prev !== carga_ac_expected_prev )
		&& ((carga_ac_expected_prev !== last_carga_ac_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carga_ac :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carga_ac_expected_prev);
		$display ("     Real value = %b", carga_ac_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_carga_ac_exp = carga_ac_expected_prev;
	end
	if (
		( carga_nz_expected_prev !== 1'bx ) && ( carga_nz_prev !== carga_nz_expected_prev )
		&& ((carga_nz_expected_prev !== last_carga_nz_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carga_nz :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carga_nz_expected_prev);
		$display ("     Real value = %b", carga_nz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_carga_nz_exp = carga_nz_expected_prev;
	end
	if (
		( carga_pc_expected_prev !== 1'bx ) && ( carga_pc_prev !== carga_pc_expected_prev )
		&& ((carga_pc_expected_prev !== last_carga_pc_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carga_pc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carga_pc_expected_prev);
		$display ("     Real value = %b", carga_pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_carga_pc_exp = carga_pc_expected_prev;
	end
	if (
		( carga_rdm_expected_prev !== 1'bx ) && ( carga_rdm_prev !== carga_rdm_expected_prev )
		&& ((carga_rdm_expected_prev !== last_carga_rdm_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carga_rdm :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carga_rdm_expected_prev);
		$display ("     Real value = %b", carga_rdm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_carga_rdm_exp = carga_rdm_expected_prev;
	end
	if (
		( carga_rem_expected_prev !== 1'bx ) && ( carga_rem_prev !== carga_rem_expected_prev )
		&& ((carga_rem_expected_prev !== last_carga_rem_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carga_rem :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carga_rem_expected_prev);
		$display ("     Real value = %b", carga_rem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_carga_rem_exp = carga_rem_expected_prev;
	end
	if (
		( carga_ri_expected_prev !== 1'bx ) && ( carga_ri_prev !== carga_ri_expected_prev )
		&& ((carga_ri_expected_prev !== last_carga_ri_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carga_ri :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carga_ri_expected_prev);
		$display ("     Real value = %b", carga_ri_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_carga_ri_exp = carga_ri_expected_prev;
	end
	if (
		( cout_expected_prev !== 1'bx ) && ( cout_prev !== cout_expected_prev )
		&& ((cout_expected_prev !== last_cout_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cout_expected_prev);
		$display ("     Real value = %b", cout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_cout_exp = cout_expected_prev;
	end
	if (
		( data_out_expected_prev[0] !== 1'bx ) && ( data_out_prev[0] !== data_out_expected_prev[0] )
		&& ((data_out_expected_prev[0] !== last_data_out_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_data_out_exp[0] = data_out_expected_prev[0];
	end
	if (
		( data_out_expected_prev[1] !== 1'bx ) && ( data_out_prev[1] !== data_out_expected_prev[1] )
		&& ((data_out_expected_prev[1] !== last_data_out_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_data_out_exp[1] = data_out_expected_prev[1];
	end
	if (
		( data_out_expected_prev[2] !== 1'bx ) && ( data_out_prev[2] !== data_out_expected_prev[2] )
		&& ((data_out_expected_prev[2] !== last_data_out_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_data_out_exp[2] = data_out_expected_prev[2];
	end
	if (
		( data_out_expected_prev[3] !== 1'bx ) && ( data_out_prev[3] !== data_out_expected_prev[3] )
		&& ((data_out_expected_prev[3] !== last_data_out_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_data_out_exp[3] = data_out_expected_prev[3];
	end
	if (
		( data_out_expected_prev[4] !== 1'bx ) && ( data_out_prev[4] !== data_out_expected_prev[4] )
		&& ((data_out_expected_prev[4] !== last_data_out_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_data_out_exp[4] = data_out_expected_prev[4];
	end
	if (
		( data_out_expected_prev[5] !== 1'bx ) && ( data_out_prev[5] !== data_out_expected_prev[5] )
		&& ((data_out_expected_prev[5] !== last_data_out_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_data_out_exp[5] = data_out_expected_prev[5];
	end
	if (
		( data_out_expected_prev[6] !== 1'bx ) && ( data_out_prev[6] !== data_out_expected_prev[6] )
		&& ((data_out_expected_prev[6] !== last_data_out_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_data_out_exp[6] = data_out_expected_prev[6];
	end
	if (
		( data_out_expected_prev[7] !== 1'bx ) && ( data_out_prev[7] !== data_out_expected_prev[7] )
		&& ((data_out_expected_prev[7] !== last_data_out_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_data_out_exp[7] = data_out_expected_prev[7];
	end
	if (
		( inc_pc_expected_prev !== 1'bx ) && ( inc_pc_prev !== inc_pc_expected_prev )
		&& ((inc_pc_expected_prev !== last_inc_pc_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inc_pc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inc_pc_expected_prev);
		$display ("     Real value = %b", inc_pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_inc_pc_exp = inc_pc_expected_prev;
	end
	if (
		( mem_in_expected_prev[0] !== 1'bx ) && ( mem_in_prev[0] !== mem_in_expected_prev[0] )
		&& ((mem_in_expected_prev[0] !== last_mem_in_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_in[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_in_expected_prev);
		$display ("     Real value = %b", mem_in_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_mem_in_exp[0] = mem_in_expected_prev[0];
	end
	if (
		( mem_in_expected_prev[1] !== 1'bx ) && ( mem_in_prev[1] !== mem_in_expected_prev[1] )
		&& ((mem_in_expected_prev[1] !== last_mem_in_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_in[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_in_expected_prev);
		$display ("     Real value = %b", mem_in_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_mem_in_exp[1] = mem_in_expected_prev[1];
	end
	if (
		( mem_in_expected_prev[2] !== 1'bx ) && ( mem_in_prev[2] !== mem_in_expected_prev[2] )
		&& ((mem_in_expected_prev[2] !== last_mem_in_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_in[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_in_expected_prev);
		$display ("     Real value = %b", mem_in_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_mem_in_exp[2] = mem_in_expected_prev[2];
	end
	if (
		( mem_in_expected_prev[3] !== 1'bx ) && ( mem_in_prev[3] !== mem_in_expected_prev[3] )
		&& ((mem_in_expected_prev[3] !== last_mem_in_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_in[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_in_expected_prev);
		$display ("     Real value = %b", mem_in_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_mem_in_exp[3] = mem_in_expected_prev[3];
	end
	if (
		( mem_in_expected_prev[4] !== 1'bx ) && ( mem_in_prev[4] !== mem_in_expected_prev[4] )
		&& ((mem_in_expected_prev[4] !== last_mem_in_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_in[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_in_expected_prev);
		$display ("     Real value = %b", mem_in_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_mem_in_exp[4] = mem_in_expected_prev[4];
	end
	if (
		( mem_in_expected_prev[5] !== 1'bx ) && ( mem_in_prev[5] !== mem_in_expected_prev[5] )
		&& ((mem_in_expected_prev[5] !== last_mem_in_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_in[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_in_expected_prev);
		$display ("     Real value = %b", mem_in_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_mem_in_exp[5] = mem_in_expected_prev[5];
	end
	if (
		( mem_in_expected_prev[6] !== 1'bx ) && ( mem_in_prev[6] !== mem_in_expected_prev[6] )
		&& ((mem_in_expected_prev[6] !== last_mem_in_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_in[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_in_expected_prev);
		$display ("     Real value = %b", mem_in_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_mem_in_exp[6] = mem_in_expected_prev[6];
	end
	if (
		( mem_in_expected_prev[7] !== 1'bx ) && ( mem_in_prev[7] !== mem_in_expected_prev[7] )
		&& ((mem_in_expected_prev[7] !== last_mem_in_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_in[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_in_expected_prev);
		$display ("     Real value = %b", mem_in_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_mem_in_exp[7] = mem_in_expected_prev[7];
	end
	if (
		( NOT_expected_prev !== 1'bx ) && ( NOT_prev !== NOT_expected_prev )
		&& ((NOT_expected_prev !== last_NOT_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NOT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NOT_expected_prev);
		$display ("     Real value = %b", NOT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_NOT_exp = NOT_expected_prev;
	end
	if (
		( opcode_expected_prev[0] !== 1'bx ) && ( opcode_prev[0] !== opcode_expected_prev[0] )
		&& ((opcode_expected_prev[0] !== last_opcode_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_opcode_exp[0] = opcode_expected_prev[0];
	end
	if (
		( opcode_expected_prev[1] !== 1'bx ) && ( opcode_prev[1] !== opcode_expected_prev[1] )
		&& ((opcode_expected_prev[1] !== last_opcode_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_opcode_exp[1] = opcode_expected_prev[1];
	end
	if (
		( opcode_expected_prev[2] !== 1'bx ) && ( opcode_prev[2] !== opcode_expected_prev[2] )
		&& ((opcode_expected_prev[2] !== last_opcode_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_opcode_exp[2] = opcode_expected_prev[2];
	end
	if (
		( OR_expected_prev !== 1'bx ) && ( OR_prev !== OR_expected_prev )
		&& ((OR_expected_prev !== last_OR_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OR_expected_prev);
		$display ("     Real value = %b", OR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_OR_exp = OR_expected_prev;
	end
	if (
		( pc_in_expected_prev[0] !== 1'bx ) && ( pc_in_prev[0] !== pc_in_expected_prev[0] )
		&& ((pc_in_expected_prev[0] !== last_pc_in_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_in[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_in_expected_prev);
		$display ("     Real value = %b", pc_in_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_pc_in_exp[0] = pc_in_expected_prev[0];
	end
	if (
		( pc_in_expected_prev[1] !== 1'bx ) && ( pc_in_prev[1] !== pc_in_expected_prev[1] )
		&& ((pc_in_expected_prev[1] !== last_pc_in_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_in[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_in_expected_prev);
		$display ("     Real value = %b", pc_in_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_pc_in_exp[1] = pc_in_expected_prev[1];
	end
	if (
		( pc_in_expected_prev[2] !== 1'bx ) && ( pc_in_prev[2] !== pc_in_expected_prev[2] )
		&& ((pc_in_expected_prev[2] !== last_pc_in_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_in[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_in_expected_prev);
		$display ("     Real value = %b", pc_in_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_pc_in_exp[2] = pc_in_expected_prev[2];
	end
	if (
		( pc_in_expected_prev[3] !== 1'bx ) && ( pc_in_prev[3] !== pc_in_expected_prev[3] )
		&& ((pc_in_expected_prev[3] !== last_pc_in_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_in[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_in_expected_prev);
		$display ("     Real value = %b", pc_in_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_pc_in_exp[3] = pc_in_expected_prev[3];
	end
	if (
		( pc_in_expected_prev[4] !== 1'bx ) && ( pc_in_prev[4] !== pc_in_expected_prev[4] )
		&& ((pc_in_expected_prev[4] !== last_pc_in_exp[4]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_in[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_in_expected_prev);
		$display ("     Real value = %b", pc_in_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_pc_in_exp[4] = pc_in_expected_prev[4];
	end
	if (
		( pc_in_expected_prev[5] !== 1'bx ) && ( pc_in_prev[5] !== pc_in_expected_prev[5] )
		&& ((pc_in_expected_prev[5] !== last_pc_in_exp[5]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_in[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_in_expected_prev);
		$display ("     Real value = %b", pc_in_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_pc_in_exp[5] = pc_in_expected_prev[5];
	end
	if (
		( pc_in_expected_prev[6] !== 1'bx ) && ( pc_in_prev[6] !== pc_in_expected_prev[6] )
		&& ((pc_in_expected_prev[6] !== last_pc_in_exp[6]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_in[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_in_expected_prev);
		$display ("     Real value = %b", pc_in_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_pc_in_exp[6] = pc_in_expected_prev[6];
	end
	if (
		( pc_in_expected_prev[7] !== 1'bx ) && ( pc_in_prev[7] !== pc_in_expected_prev[7] )
		&& ((pc_in_expected_prev[7] !== last_pc_in_exp[7]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_in[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_in_expected_prev);
		$display ("     Real value = %b", pc_in_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_pc_in_exp[7] = pc_in_expected_prev[7];
	end
	if (
		( pc_out_expected_prev[0] !== 1'bx ) && ( pc_out_prev[0] !== pc_out_expected_prev[0] )
		&& ((pc_out_expected_prev[0] !== last_pc_out_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_out_expected_prev);
		$display ("     Real value = %b", pc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_pc_out_exp[0] = pc_out_expected_prev[0];
	end
	if (
		( pc_out_expected_prev[1] !== 1'bx ) && ( pc_out_prev[1] !== pc_out_expected_prev[1] )
		&& ((pc_out_expected_prev[1] !== last_pc_out_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_out_expected_prev);
		$display ("     Real value = %b", pc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_pc_out_exp[1] = pc_out_expected_prev[1];
	end
	if (
		( pc_out_expected_prev[2] !== 1'bx ) && ( pc_out_prev[2] !== pc_out_expected_prev[2] )
		&& ((pc_out_expected_prev[2] !== last_pc_out_exp[2]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_out_expected_prev);
		$display ("     Real value = %b", pc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_pc_out_exp[2] = pc_out_expected_prev[2];
	end
	if (
		( pc_out_expected_prev[3] !== 1'bx ) && ( pc_out_prev[3] !== pc_out_expected_prev[3] )
		&& ((pc_out_expected_prev[3] !== last_pc_out_exp[3]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_out_expected_prev);
		$display ("     Real value = %b", pc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_pc_out_exp[3] = pc_out_expected_prev[3];
	end
	if (
		( pc_out_expected_prev[4] !== 1'bx ) && ( pc_out_prev[4] !== pc_out_expected_prev[4] )
		&& ((pc_out_expected_prev[4] !== last_pc_out_exp[4]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_out_expected_prev);
		$display ("     Real value = %b", pc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_pc_out_exp[4] = pc_out_expected_prev[4];
	end
	if (
		( pc_out_expected_prev[5] !== 1'bx ) && ( pc_out_prev[5] !== pc_out_expected_prev[5] )
		&& ((pc_out_expected_prev[5] !== last_pc_out_exp[5]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_out_expected_prev);
		$display ("     Real value = %b", pc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_pc_out_exp[5] = pc_out_expected_prev[5];
	end
	if (
		( pc_out_expected_prev[6] !== 1'bx ) && ( pc_out_prev[6] !== pc_out_expected_prev[6] )
		&& ((pc_out_expected_prev[6] !== last_pc_out_exp[6]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_out_expected_prev);
		$display ("     Real value = %b", pc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_pc_out_exp[6] = pc_out_expected_prev[6];
	end
	if (
		( pc_out_expected_prev[7] !== 1'bx ) && ( pc_out_prev[7] !== pc_out_expected_prev[7] )
		&& ((pc_out_expected_prev[7] !== last_pc_out_exp[7]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_out_expected_prev);
		$display ("     Real value = %b", pc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_pc_out_exp[7] = pc_out_expected_prev[7];
	end
	if (
		( read_expected_prev !== 1'bx ) && ( read_prev !== read_expected_prev )
		&& ((read_expected_prev !== last_read_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_expected_prev);
		$display ("     Real value = %b", read_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_read_exp = read_expected_prev;
	end
	if (
		( sel_expected_prev !== 1'bx ) && ( sel_prev !== sel_expected_prev )
		&& ((sel_expected_prev !== last_sel_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_expected_prev);
		$display ("     Real value = %b", sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_sel_exp = sel_expected_prev;
	end
	if (
		( write_expected_prev !== 1'bx ) && ( write_prev !== write_expected_prev )
		&& ((write_expected_prev !== last_write_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_expected_prev);
		$display ("     Real value = %b", write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_write_exp = write_expected_prev;
	end
	if (
		( Y_expected_prev !== 1'bx ) && ( Y_prev !== Y_expected_prev )
		&& ((Y_expected_prev !== last_Y_exp) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_Y_exp = Y_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module parteoperativa_vlg_vec_tst();
// constants                                           
// general purpose registers
reg cin;
reg clk;
reg mem_reset;
// wires                                               
wire [7:0] ac_value;
wire ADD;
wire AND;
wire carga_ac;
wire carga_nz;
wire carga_pc;
wire carga_rdm;
wire carga_rem;
wire carga_ri;
wire cout;
wire [7:0] data_out;
wire inc_pc;
wire [7:0] mem_in;
wire NOT;
wire [2:0] opcode;
wire OR;
wire [7:0] pc_in;
wire [7:0] pc_out;
wire read;
wire sel;
wire write;
wire Y;

wire sampler;                             

// assign statements (if any)                          
parteoperativa i1 (
// port map - connection between master ports and signals/registers   
	.ac_value(ac_value),
	.ADD(ADD),
	.\AND (AND),
	.carga_ac(carga_ac),
	.carga_nz(carga_nz),
	.carga_pc(carga_pc),
	.carga_rdm(carga_rdm),
	.carga_rem(carga_rem),
	.carga_ri(carga_ri),
	.cin(cin),
	.clk(clk),
	.cout(cout),
	.data_out(data_out),
	.inc_pc(inc_pc),
	.mem_in(mem_in),
	.mem_reset(mem_reset),
	.\NOT (NOT),
	.opcode(opcode),
	.\OR (OR),
	.pc_in(pc_in),
	.pc_out(pc_out),
	.read(read),
	.sel(sel),
	.write(write),
	.Y(Y)
);

// cin
initial
begin
	cin = 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

parteoperativa_vlg_sample_tst tb_sample (
	.cin(cin),
	.clk(clk),
	.mem_reset(mem_reset),
	.sampler_tx(sampler)
);

parteoperativa_vlg_check_tst tb_out(
	.ac_value(ac_value),
	.ADD(ADD),
	.AND(AND),
	.carga_ac(carga_ac),
	.carga_nz(carga_nz),
	.carga_pc(carga_pc),
	.carga_rdm(carga_rdm),
	.carga_rem(carga_rem),
	.carga_ri(carga_ri),
	.cout(cout),
	.data_out(data_out),
	.inc_pc(inc_pc),
	.mem_in(mem_in),
	.NOT(NOT),
	.opcode(opcode),
	.OR(OR),
	.pc_in(pc_in),
	.pc_out(pc_out),
	.read(read),
	.sel(sel),
	.write(write),
	.Y(Y),
	.sampler_rx(sampler)
);
endmodule

