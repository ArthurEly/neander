// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/19/2023 14:28:35"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    decodneanderinstructions
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module decodneanderinstructions_vlg_sample_tst(
	a0,
	a1,
	a2,
	a3,
	sampler_tx
);
input  a0;
input  a1;
input  a2;
input  a3;
output sampler_tx;

reg sample;
time current_time;
always @(a0 or a1 or a2 or a3)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module decodneanderinstructions_vlg_check_tst (
	ADD,
	AND,
	HLT,
	JMP,
	JN,
	JZ,
	LDA,
	NOP,
	NOT,
	OR,
	STA,
	sampler_rx
);
input  ADD;
input  AND;
input  HLT;
input  JMP;
input  JN;
input  JZ;
input  LDA;
input  NOP;
input  NOT;
input  OR;
input  STA;
input sampler_rx;

reg  ADD_expected;
reg  AND_expected;
reg  HLT_expected;
reg  JMP_expected;
reg  JN_expected;
reg  JZ_expected;
reg  LDA_expected;
reg  NOP_expected;
reg  NOT_expected;
reg  OR_expected;
reg  STA_expected;

reg  ADD_prev;
reg  AND_prev;
reg  HLT_prev;
reg  JMP_prev;
reg  JN_prev;
reg  JZ_prev;
reg  LDA_prev;
reg  NOP_prev;
reg  NOT_prev;
reg  OR_prev;
reg  STA_prev;

reg  ADD_expected_prev;
reg  AND_expected_prev;
reg  HLT_expected_prev;
reg  JMP_expected_prev;
reg  JN_expected_prev;
reg  JZ_expected_prev;
reg  LDA_expected_prev;
reg  NOP_expected_prev;
reg  NOT_expected_prev;
reg  OR_expected_prev;
reg  STA_expected_prev;

reg  last_ADD_exp;
reg  last_AND_exp;
reg  last_HLT_exp;
reg  last_JMP_exp;
reg  last_JN_exp;
reg  last_JZ_exp;
reg  last_LDA_exp;
reg  last_NOP_exp;
reg  last_NOT_exp;
reg  last_OR_exp;
reg  last_STA_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:11] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 11'b1;
end

// update real /o prevs

always @(trigger)
begin
	ADD_prev = ADD;
	AND_prev = AND;
	HLT_prev = HLT;
	JMP_prev = JMP;
	JN_prev = JN;
	JZ_prev = JZ;
	LDA_prev = LDA;
	NOP_prev = NOP;
	NOT_prev = NOT;
	OR_prev = OR;
	STA_prev = STA;
end

// update expected /o prevs

always @(trigger)
begin
	ADD_expected_prev = ADD_expected;
	AND_expected_prev = AND_expected;
	HLT_expected_prev = HLT_expected;
	JMP_expected_prev = JMP_expected;
	JN_expected_prev = JN_expected;
	JZ_expected_prev = JZ_expected;
	LDA_expected_prev = LDA_expected;
	NOP_expected_prev = NOP_expected;
	NOT_expected_prev = NOT_expected;
	OR_expected_prev = OR_expected;
	STA_expected_prev = STA_expected;
end



// expected ADD
initial
begin
	ADD_expected = 1'bX;
end 

// expected AND
initial
begin
	AND_expected = 1'bX;
end 

// expected HLT
initial
begin
	HLT_expected = 1'bX;
end 

// expected JMP
initial
begin
	JMP_expected = 1'bX;
end 

// expected JN
initial
begin
	JN_expected = 1'bX;
end 

// expected JZ
initial
begin
	JZ_expected = 1'bX;
end 

// expected LDA
initial
begin
	LDA_expected = 1'bX;
end 

// expected NOP
initial
begin
	NOP_expected = 1'bX;
end 

// expected NOT
initial
begin
	NOT_expected = 1'bX;
end 

// expected OR
initial
begin
	OR_expected = 1'bX;
end 

// expected STA
initial
begin
	STA_expected = 1'bX;
end 
// generate trigger
always @(ADD_expected or ADD or AND_expected or AND or HLT_expected or HLT or JMP_expected or JMP or JN_expected or JN or JZ_expected or JZ or LDA_expected or LDA or NOP_expected or NOP or NOT_expected or NOT or OR_expected or OR or STA_expected or STA)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ADD = %b | expected AND = %b | expected HLT = %b | expected JMP = %b | expected JN = %b | expected JZ = %b | expected LDA = %b | expected NOP = %b | expected NOT = %b | expected OR = %b | expected STA = %b | ",ADD_expected_prev,AND_expected_prev,HLT_expected_prev,JMP_expected_prev,JN_expected_prev,JZ_expected_prev,LDA_expected_prev,NOP_expected_prev,NOT_expected_prev,OR_expected_prev,STA_expected_prev);
	$display("| real ADD = %b | real AND = %b | real HLT = %b | real JMP = %b | real JN = %b | real JZ = %b | real LDA = %b | real NOP = %b | real NOT = %b | real OR = %b | real STA = %b | ",ADD_prev,AND_prev,HLT_prev,JMP_prev,JN_prev,JZ_prev,LDA_prev,NOP_prev,NOT_prev,OR_prev,STA_prev);
`endif
	if (
		( ADD_expected_prev !== 1'bx ) && ( ADD_prev !== ADD_expected_prev )
		&& ((ADD_expected_prev !== last_ADD_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADD_expected_prev);
		$display ("     Real value = %b", ADD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADD_exp = ADD_expected_prev;
	end
	if (
		( AND_expected_prev !== 1'bx ) && ( AND_prev !== AND_expected_prev )
		&& ((AND_expected_prev !== last_AND_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AND :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AND_expected_prev);
		$display ("     Real value = %b", AND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AND_exp = AND_expected_prev;
	end
	if (
		( HLT_expected_prev !== 1'bx ) && ( HLT_prev !== HLT_expected_prev )
		&& ((HLT_expected_prev !== last_HLT_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HLT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HLT_expected_prev);
		$display ("     Real value = %b", HLT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HLT_exp = HLT_expected_prev;
	end
	if (
		( JMP_expected_prev !== 1'bx ) && ( JMP_prev !== JMP_expected_prev )
		&& ((JMP_expected_prev !== last_JMP_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JMP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JMP_expected_prev);
		$display ("     Real value = %b", JMP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_JMP_exp = JMP_expected_prev;
	end
	if (
		( JN_expected_prev !== 1'bx ) && ( JN_prev !== JN_expected_prev )
		&& ((JN_expected_prev !== last_JN_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JN :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JN_expected_prev);
		$display ("     Real value = %b", JN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_JN_exp = JN_expected_prev;
	end
	if (
		( JZ_expected_prev !== 1'bx ) && ( JZ_prev !== JZ_expected_prev )
		&& ((JZ_expected_prev !== last_JZ_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JZ :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JZ_expected_prev);
		$display ("     Real value = %b", JZ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_JZ_exp = JZ_expected_prev;
	end
	if (
		( LDA_expected_prev !== 1'bx ) && ( LDA_prev !== LDA_expected_prev )
		&& ((LDA_expected_prev !== last_LDA_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LDA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LDA_expected_prev);
		$display ("     Real value = %b", LDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LDA_exp = LDA_expected_prev;
	end
	if (
		( NOP_expected_prev !== 1'bx ) && ( NOP_prev !== NOP_expected_prev )
		&& ((NOP_expected_prev !== last_NOP_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NOP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NOP_expected_prev);
		$display ("     Real value = %b", NOP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_NOP_exp = NOP_expected_prev;
	end
	if (
		( NOT_expected_prev !== 1'bx ) && ( NOT_prev !== NOT_expected_prev )
		&& ((NOT_expected_prev !== last_NOT_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NOT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NOT_expected_prev);
		$display ("     Real value = %b", NOT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_NOT_exp = NOT_expected_prev;
	end
	if (
		( OR_expected_prev !== 1'bx ) && ( OR_prev !== OR_expected_prev )
		&& ((OR_expected_prev !== last_OR_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OR_expected_prev);
		$display ("     Real value = %b", OR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_OR_exp = OR_expected_prev;
	end
	if (
		( STA_expected_prev !== 1'bx ) && ( STA_prev !== STA_expected_prev )
		&& ((STA_expected_prev !== last_STA_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port STA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", STA_expected_prev);
		$display ("     Real value = %b", STA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_STA_exp = STA_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module decodneanderinstructions_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a0;
reg a1;
reg a2;
reg a3;
// wires                                               
wire ADD;
wire AND;
wire HLT;
wire JMP;
wire JN;
wire JZ;
wire LDA;
wire NOP;
wire NOT;
wire OR;
wire STA;

wire sampler;                             

// assign statements (if any)                          
decodneanderinstructions i1 (
// port map - connection between master ports and signals/registers   
	.a0(a0),
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.ADD(ADD),
	.\AND (AND),
	.HLT(HLT),
	.JMP(JMP),
	.JN(JN),
	.JZ(JZ),
	.LDA(LDA),
	.NOP(NOP),
	.\NOT (NOT),
	.\OR (OR),
	.STA(STA)
);

// a3
initial
begin
	repeat(6)
	begin
		a3 = 1'b0;
		a3 = #80000 1'b1;
		# 80000;
	end
	a3 = 1'b0;
end 

// a2
initial
begin
	repeat(12)
	begin
		a2 = 1'b0;
		a2 = #40000 1'b1;
		# 40000;
	end
	a2 = 1'b0;
end 

// a1
always
begin
	a1 = 1'b0;
	a1 = #20000 1'b1;
	#20000;
end 

// a0
always
begin
	a0 = 1'b0;
	a0 = #10000 1'b1;
	#10000;
end 

decodneanderinstructions_vlg_sample_tst tb_sample (
	.a0(a0),
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.sampler_tx(sampler)
);

decodneanderinstructions_vlg_check_tst tb_out(
	.ADD(ADD),
	.AND(AND),
	.HLT(HLT),
	.JMP(JMP),
	.JN(JN),
	.JZ(JZ),
	.LDA(LDA),
	.NOP(NOP),
	.NOT(NOT),
	.OR(OR),
	.STA(STA),
	.sampler_rx(sampler)
);
endmodule

