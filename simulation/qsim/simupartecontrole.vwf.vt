// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/19/2023 03:15:26"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    partedecontrole
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module partedecontrole_vlg_sample_tst(
	clk,
	count,
	N,
	op0,
	op1,
	op2,
	op3,
	Z,
	sampler_tx
);
input  clk;
input  count;
input  N;
input  op0;
input  op1;
input  op2;
input  op3;
input  Z;
output sampler_tx;

reg sample;
time current_time;
always @(clk or count or N or op0 or op1 or op2 or op3 or Z)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module partedecontrole_vlg_check_tst (
	carga_ac,
	carga_nz,
	carga_pc,
	carga_rdm,
	carga_rem,
	carga_ri,
	counter,
	goto,
	inc_pc,
	read,
	sel,
	ULA_add,
	ULA_and,
	ULA_not,
	ULA_or,
	ULA_y,
	write,
	sampler_rx
);
input  carga_ac;
input  carga_nz;
input  carga_pc;
input  carga_rdm;
input  carga_rem;
input  carga_ri;
input [2:0] counter;
input  goto;
input  inc_pc;
input  read;
input  sel;
input  ULA_add;
input  ULA_and;
input  ULA_not;
input  ULA_or;
input  ULA_y;
input  write;
input sampler_rx;

reg  carga_ac_expected;
reg  carga_nz_expected;
reg  carga_pc_expected;
reg  carga_rdm_expected;
reg  carga_rem_expected;
reg  carga_ri_expected;
reg [2:0] counter_expected;
reg  goto_expected;
reg  inc_pc_expected;
reg  read_expected;
reg  sel_expected;
reg  ULA_add_expected;
reg  ULA_and_expected;
reg  ULA_not_expected;
reg  ULA_or_expected;
reg  ULA_y_expected;
reg  write_expected;

reg  carga_ac_prev;
reg  carga_nz_prev;
reg  carga_pc_prev;
reg  carga_rdm_prev;
reg  carga_rem_prev;
reg  carga_ri_prev;
reg [2:0] counter_prev;
reg  goto_prev;
reg  inc_pc_prev;
reg  read_prev;
reg  sel_prev;
reg  ULA_add_prev;
reg  ULA_and_prev;
reg  ULA_not_prev;
reg  ULA_or_prev;
reg  ULA_y_prev;
reg  write_prev;

reg  carga_ac_expected_prev;
reg  carga_nz_expected_prev;
reg  carga_pc_expected_prev;
reg  carga_rdm_expected_prev;
reg  carga_rem_expected_prev;
reg  carga_ri_expected_prev;
reg [2:0] counter_expected_prev;
reg  goto_expected_prev;
reg  inc_pc_expected_prev;
reg  read_expected_prev;
reg  sel_expected_prev;
reg  ULA_add_expected_prev;
reg  ULA_and_expected_prev;
reg  ULA_not_expected_prev;
reg  ULA_or_expected_prev;
reg  ULA_y_expected_prev;
reg  write_expected_prev;

reg  last_carga_ac_exp;
reg  last_carga_nz_exp;
reg  last_carga_pc_exp;
reg  last_carga_rdm_exp;
reg  last_carga_rem_exp;
reg  last_carga_ri_exp;
reg [2:0] last_counter_exp;
reg  last_goto_exp;
reg  last_inc_pc_exp;
reg  last_read_exp;
reg  last_sel_exp;
reg  last_ULA_add_exp;
reg  last_ULA_and_exp;
reg  last_ULA_not_exp;
reg  last_ULA_or_exp;
reg  last_ULA_y_exp;
reg  last_write_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:17] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 17'b1;
end

// update real /o prevs

always @(trigger)
begin
	carga_ac_prev = carga_ac;
	carga_nz_prev = carga_nz;
	carga_pc_prev = carga_pc;
	carga_rdm_prev = carga_rdm;
	carga_rem_prev = carga_rem;
	carga_ri_prev = carga_ri;
	counter_prev = counter;
	goto_prev = goto;
	inc_pc_prev = inc_pc;
	read_prev = read;
	sel_prev = sel;
	ULA_add_prev = ULA_add;
	ULA_and_prev = ULA_and;
	ULA_not_prev = ULA_not;
	ULA_or_prev = ULA_or;
	ULA_y_prev = ULA_y;
	write_prev = write;
end

// update expected /o prevs

always @(trigger)
begin
	carga_ac_expected_prev = carga_ac_expected;
	carga_nz_expected_prev = carga_nz_expected;
	carga_pc_expected_prev = carga_pc_expected;
	carga_rdm_expected_prev = carga_rdm_expected;
	carga_rem_expected_prev = carga_rem_expected;
	carga_ri_expected_prev = carga_ri_expected;
	counter_expected_prev = counter_expected;
	goto_expected_prev = goto_expected;
	inc_pc_expected_prev = inc_pc_expected;
	read_expected_prev = read_expected;
	sel_expected_prev = sel_expected;
	ULA_add_expected_prev = ULA_add_expected;
	ULA_and_expected_prev = ULA_and_expected;
	ULA_not_expected_prev = ULA_not_expected;
	ULA_or_expected_prev = ULA_or_expected;
	ULA_y_expected_prev = ULA_y_expected;
	write_expected_prev = write_expected;
end



// expected carga_rem
initial
begin
	carga_rem_expected = 1'bX;
end 

// expected inc_pc
initial
begin
	inc_pc_expected = 1'bX;
end 

// expected carga_ri
initial
begin
	carga_ri_expected = 1'bX;
end 

// expected sel
initial
begin
	sel_expected = 1'bX;
end 

// expected carga_rdm
initial
begin
	carga_rdm_expected = 1'bX;
end 

// expected read
initial
begin
	read_expected = 1'bX;
end 

// expected write
initial
begin
	write_expected = 1'bX;
end 

// expected ULA_y
initial
begin
	ULA_y_expected = 1'bX;
end 

// expected ULA_add
initial
begin
	ULA_add_expected = 1'bX;
end 

// expected ULA_or
initial
begin
	ULA_or_expected = 1'bX;
end 

// expected ULA_and
initial
begin
	ULA_and_expected = 1'bX;
end 

// expected ULA_not
initial
begin
	ULA_not_expected = 1'bX;
end 

// expected carga_ac
initial
begin
	carga_ac_expected = 1'bX;
end 

// expected carga_nz
initial
begin
	carga_nz_expected = 1'bX;
end 

// expected carga_pc
initial
begin
	carga_pc_expected = 1'bX;
end 

// expected goto
initial
begin
	goto_expected = 1'bX;
end 
// expected counter[ 2 ]
initial
begin
	counter_expected[2] = 1'bX;
end 
// expected counter[ 1 ]
initial
begin
	counter_expected[1] = 1'bX;
end 
// expected counter[ 0 ]
initial
begin
	counter_expected[0] = 1'bX;
end 
// generate trigger
always @(carga_ac_expected or carga_ac or carga_nz_expected or carga_nz or carga_pc_expected or carga_pc or carga_rdm_expected or carga_rdm or carga_rem_expected or carga_rem or carga_ri_expected or carga_ri or counter_expected or counter or goto_expected or goto or inc_pc_expected or inc_pc or read_expected or read or sel_expected or sel or ULA_add_expected or ULA_add or ULA_and_expected or ULA_and or ULA_not_expected or ULA_not or ULA_or_expected or ULA_or or ULA_y_expected or ULA_y or write_expected or write)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected carga_ac = %b | expected carga_nz = %b | expected carga_pc = %b | expected carga_rdm = %b | expected carga_rem = %b | expected carga_ri = %b | expected counter = %b | expected goto = %b | expected inc_pc = %b | expected read = %b | expected sel = %b | expected ULA_add = %b | expected ULA_and = %b | expected ULA_not = %b | expected ULA_or = %b | expected ULA_y = %b | expected write = %b | ",carga_ac_expected_prev,carga_nz_expected_prev,carga_pc_expected_prev,carga_rdm_expected_prev,carga_rem_expected_prev,carga_ri_expected_prev,counter_expected_prev,goto_expected_prev,inc_pc_expected_prev,read_expected_prev,sel_expected_prev,ULA_add_expected_prev,ULA_and_expected_prev,ULA_not_expected_prev,ULA_or_expected_prev,ULA_y_expected_prev,write_expected_prev);
	$display("| real carga_ac = %b | real carga_nz = %b | real carga_pc = %b | real carga_rdm = %b | real carga_rem = %b | real carga_ri = %b | real counter = %b | real goto = %b | real inc_pc = %b | real read = %b | real sel = %b | real ULA_add = %b | real ULA_and = %b | real ULA_not = %b | real ULA_or = %b | real ULA_y = %b | real write = %b | ",carga_ac_prev,carga_nz_prev,carga_pc_prev,carga_rdm_prev,carga_rem_prev,carga_ri_prev,counter_prev,goto_prev,inc_pc_prev,read_prev,sel_prev,ULA_add_prev,ULA_and_prev,ULA_not_prev,ULA_or_prev,ULA_y_prev,write_prev);
`endif
	if (
		( carga_ac_expected_prev !== 1'bx ) && ( carga_ac_prev !== carga_ac_expected_prev )
		&& ((carga_ac_expected_prev !== last_carga_ac_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carga_ac :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carga_ac_expected_prev);
		$display ("     Real value = %b", carga_ac_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_carga_ac_exp = carga_ac_expected_prev;
	end
	if (
		( carga_nz_expected_prev !== 1'bx ) && ( carga_nz_prev !== carga_nz_expected_prev )
		&& ((carga_nz_expected_prev !== last_carga_nz_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carga_nz :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carga_nz_expected_prev);
		$display ("     Real value = %b", carga_nz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_carga_nz_exp = carga_nz_expected_prev;
	end
	if (
		( carga_pc_expected_prev !== 1'bx ) && ( carga_pc_prev !== carga_pc_expected_prev )
		&& ((carga_pc_expected_prev !== last_carga_pc_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carga_pc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carga_pc_expected_prev);
		$display ("     Real value = %b", carga_pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_carga_pc_exp = carga_pc_expected_prev;
	end
	if (
		( carga_rdm_expected_prev !== 1'bx ) && ( carga_rdm_prev !== carga_rdm_expected_prev )
		&& ((carga_rdm_expected_prev !== last_carga_rdm_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carga_rdm :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carga_rdm_expected_prev);
		$display ("     Real value = %b", carga_rdm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_carga_rdm_exp = carga_rdm_expected_prev;
	end
	if (
		( carga_rem_expected_prev !== 1'bx ) && ( carga_rem_prev !== carga_rem_expected_prev )
		&& ((carga_rem_expected_prev !== last_carga_rem_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carga_rem :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carga_rem_expected_prev);
		$display ("     Real value = %b", carga_rem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_carga_rem_exp = carga_rem_expected_prev;
	end
	if (
		( carga_ri_expected_prev !== 1'bx ) && ( carga_ri_prev !== carga_ri_expected_prev )
		&& ((carga_ri_expected_prev !== last_carga_ri_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carga_ri :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carga_ri_expected_prev);
		$display ("     Real value = %b", carga_ri_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_carga_ri_exp = carga_ri_expected_prev;
	end
	if (
		( counter_expected_prev[0] !== 1'bx ) && ( counter_prev[0] !== counter_expected_prev[0] )
		&& ((counter_expected_prev[0] !== last_counter_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_expected_prev);
		$display ("     Real value = %b", counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_counter_exp[0] = counter_expected_prev[0];
	end
	if (
		( counter_expected_prev[1] !== 1'bx ) && ( counter_prev[1] !== counter_expected_prev[1] )
		&& ((counter_expected_prev[1] !== last_counter_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_expected_prev);
		$display ("     Real value = %b", counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_counter_exp[1] = counter_expected_prev[1];
	end
	if (
		( counter_expected_prev[2] !== 1'bx ) && ( counter_prev[2] !== counter_expected_prev[2] )
		&& ((counter_expected_prev[2] !== last_counter_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_expected_prev);
		$display ("     Real value = %b", counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_counter_exp[2] = counter_expected_prev[2];
	end
	if (
		( goto_expected_prev !== 1'bx ) && ( goto_prev !== goto_expected_prev )
		&& ((goto_expected_prev !== last_goto_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port goto :: @time = %t",  $realtime);
		$display ("     Expected value = %b", goto_expected_prev);
		$display ("     Real value = %b", goto_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_goto_exp = goto_expected_prev;
	end
	if (
		( inc_pc_expected_prev !== 1'bx ) && ( inc_pc_prev !== inc_pc_expected_prev )
		&& ((inc_pc_expected_prev !== last_inc_pc_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inc_pc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inc_pc_expected_prev);
		$display ("     Real value = %b", inc_pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_inc_pc_exp = inc_pc_expected_prev;
	end
	if (
		( read_expected_prev !== 1'bx ) && ( read_prev !== read_expected_prev )
		&& ((read_expected_prev !== last_read_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_expected_prev);
		$display ("     Real value = %b", read_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_read_exp = read_expected_prev;
	end
	if (
		( sel_expected_prev !== 1'bx ) && ( sel_prev !== sel_expected_prev )
		&& ((sel_expected_prev !== last_sel_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_expected_prev);
		$display ("     Real value = %b", sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_sel_exp = sel_expected_prev;
	end
	if (
		( ULA_add_expected_prev !== 1'bx ) && ( ULA_add_prev !== ULA_add_expected_prev )
		&& ((ULA_add_expected_prev !== last_ULA_add_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_add :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_add_expected_prev);
		$display ("     Real value = %b", ULA_add_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ULA_add_exp = ULA_add_expected_prev;
	end
	if (
		( ULA_and_expected_prev !== 1'bx ) && ( ULA_and_prev !== ULA_and_expected_prev )
		&& ((ULA_and_expected_prev !== last_ULA_and_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_and :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_and_expected_prev);
		$display ("     Real value = %b", ULA_and_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ULA_and_exp = ULA_and_expected_prev;
	end
	if (
		( ULA_not_expected_prev !== 1'bx ) && ( ULA_not_prev !== ULA_not_expected_prev )
		&& ((ULA_not_expected_prev !== last_ULA_not_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_not :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_not_expected_prev);
		$display ("     Real value = %b", ULA_not_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ULA_not_exp = ULA_not_expected_prev;
	end
	if (
		( ULA_or_expected_prev !== 1'bx ) && ( ULA_or_prev !== ULA_or_expected_prev )
		&& ((ULA_or_expected_prev !== last_ULA_or_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_or :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_or_expected_prev);
		$display ("     Real value = %b", ULA_or_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ULA_or_exp = ULA_or_expected_prev;
	end
	if (
		( ULA_y_expected_prev !== 1'bx ) && ( ULA_y_prev !== ULA_y_expected_prev )
		&& ((ULA_y_expected_prev !== last_ULA_y_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_y :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_y_expected_prev);
		$display ("     Real value = %b", ULA_y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_ULA_y_exp = ULA_y_expected_prev;
	end
	if (
		( write_expected_prev !== 1'bx ) && ( write_prev !== write_expected_prev )
		&& ((write_expected_prev !== last_write_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_expected_prev);
		$display ("     Real value = %b", write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_write_exp = write_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module partedecontrole_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg count;
reg N;
reg op0;
reg op1;
reg op2;
reg op3;
reg Z;
// wires                                               
wire carga_ac;
wire carga_nz;
wire carga_pc;
wire carga_rdm;
wire carga_rem;
wire carga_ri;
wire [2:0] counter;
wire goto;
wire inc_pc;
wire read;
wire sel;
wire ULA_add;
wire ULA_and;
wire ULA_not;
wire ULA_or;
wire ULA_y;
wire write;

wire sampler;                             

// assign statements (if any)                          
partedecontrole i1 (
// port map - connection between master ports and signals/registers   
	.carga_ac(carga_ac),
	.carga_nz(carga_nz),
	.carga_pc(carga_pc),
	.carga_rdm(carga_rdm),
	.carga_rem(carga_rem),
	.carga_ri(carga_ri),
	.clk(clk),
	.count(count),
	.counter(counter),
	.goto(goto),
	.inc_pc(inc_pc),
	.N(N),
	.op0(op0),
	.op1(op1),
	.op2(op2),
	.op3(op3),
	.read(read),
	.sel(sel),
	.ULA_add(ULA_add),
	.ULA_and(ULA_and),
	.ULA_not(ULA_not),
	.ULA_or(ULA_or),
	.ULA_y(ULA_y),
	.write(write),
	.Z(Z)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// count
initial
begin
	count = 1'b1;
end 

// N
initial
begin
	N = 1'b0;
end 

// Z
initial
begin
	Z = 1'b0;
end 

// op0
initial
begin
	op0 = 1'b0;
end 

// op1
initial
begin
	op1 = 1'b0;
end 

// op2
initial
begin
	op2 = 1'b0;
end 

// op3
initial
begin
	op3 = 1'b0;
end 

partedecontrole_vlg_sample_tst tb_sample (
	.clk(clk),
	.count(count),
	.N(N),
	.op0(op0),
	.op1(op1),
	.op2(op2),
	.op3(op3),
	.Z(Z),
	.sampler_tx(sampler)
);

partedecontrole_vlg_check_tst tb_out(
	.carga_ac(carga_ac),
	.carga_nz(carga_nz),
	.carga_pc(carga_pc),
	.carga_rdm(carga_rdm),
	.carga_rem(carga_rem),
	.carga_ri(carga_ri),
	.counter(counter),
	.goto(goto),
	.inc_pc(inc_pc),
	.read(read),
	.sel(sel),
	.ULA_add(ULA_add),
	.ULA_and(ULA_and),
	.ULA_not(ULA_not),
	.ULA_or(ULA_or),
	.ULA_y(ULA_y),
	.write(write),
	.sampler_rx(sampler)
);
endmodule

